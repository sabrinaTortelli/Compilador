package br.univali.compiladores.compilador.model.recovery;

import br.univali.compiladores.compilador.model.*;
import br.univali.compiladores.compilador.model.parser.LParserConstants;

import java.util.*;

public class First {
    static public final RecoverySet DeclarationConstantsAndVariables = new RecoverySet();
    static public final RecoverySet DeclarationEnumeratedType = new RecoverySet();
    static public final RecoverySet EvaluateUntrue = new RecoverySet();
    static public final RecoverySet EvaluateTrue = new RecoverySet();
    static public final RecoverySet Description = new RecoverySet();
    static public final RecoverySet LowestPriority = new RecoverySet();
    static public final RecoverySet MediumPriority = new RecoverySet();
    static public final RecoverySet HighestPriority = new RecoverySet();
    static public final RecoverySet Index = new RecoverySet();
    static public final RecoverySet ExpressionL = new RecoverySet();
    static public final RecoverySet OutPutConstants = new RecoverySet();
    static public final RecoverySet Command = new RecoverySet();
    static public final RecoverySet Evaluate = new RecoverySet();
    static public final RecoverySet EvaluateRep = new RecoverySet();
    static public final RecoverySet Program = new RecoverySet();
    static public final RecoverySet IdentifierEnumTypeDeclarationList = new RecoverySet();
    static public final RecoverySet IdentifierList = new RecoverySet();
    static public final RecoverySet ConstantsList = IdentifierList;
    static public final RecoverySet AsConstants = ConstantsList;
    static public final RecoverySet IdentifierVariablesList = new RecoverySet();
    static public final RecoverySet VariablesList = IdentifierVariablesList;
    static public final RecoverySet AsVariables = VariablesList;
    static public final RecoverySet OrderConstantsAndVariables = new RecoverySet();
    static public final RecoverySet ConstantAndVariablesInitiation = new RecoverySet();
    static public final RecoverySet ConstTypeValueCombo = new RecoverySet();
    static public final RecoverySet TypeAndValueLogicConstants = new RecoverySet();
    static public final RecoverySet VariablesTypes = new RecoverySet();
    static public final RecoverySet CmdAssignment = new RecoverySet();
    static public final RecoverySet Element = new RecoverySet();
    static public final RecoverySet FirstTerm = Element;
    static public final RecoverySet CmdDataInput = new RecoverySet();
    static public final RecoverySet CmdDataOutput = new RecoverySet();
    static public final RecoverySet This = new RecoverySet();
    static public final RecoverySet AllThis = new RecoverySet();
    static public final RecoverySet IdentifiersAndOrConstantsList = new RecoverySet();
    static public final RecoverySet CmdSelection = new RecoverySet();
    static public final RecoverySet CmdRepetition = new RecoverySet();
    static public final RecoverySet EvaluateRepTrue = new RecoverySet();
    static public final RecoverySet EvaluateRepUntrue = new RecoverySet();
    static public final RecoverySet SecondTerm = FirstTerm;
    static public final RecoverySet ArithmeticOrLogicalExpression = SecondTerm;
    static public final RecoverySet Expression = ArithmeticOrLogicalExpression;
    static public final RecoverySet CommandList = Command;



    static {
        Program.add(LParserConstants.RESERVED_WORD_DO);
        Description.add(LParserConstants.RESERVED_WORD_DESCRIPTION);
        DeclarationEnumeratedType.add(LParserConstants.RESERVED_WORD_DECLARATION);
        IdentifierEnumTypeDeclarationList.add(LParserConstants.IDENTIFIER);
        IdentifierList.add(LParserConstants.IDENTIFIER);
        DeclarationConstantsAndVariables.add(LParserConstants.RESERVED_WORD_DECLARATION);
        OrderConstantsAndVariables.add(LParserConstants.RESERVED_WORD_AS);
        ConstantAndVariablesInitiation.add(LParserConstants.RESERVED_WORD_CONSTANT);
        ConstantAndVariablesInitiation.add(LParserConstants.RESERVED_WORD_VARIABLE);
        ConstTypeValueCombo.add(LParserConstants.RESERVED_WORD_INTEGER);
        ConstTypeValueCombo.add(LParserConstants.RESERVED_WORD_REAL);
        ConstTypeValueCombo.add(LParserConstants.RESERVED_WORD_STRING);
        ConstTypeValueCombo.add(LParserConstants.RESERVED_WORD_LOGIC);
        TypeAndValueLogicConstants.add(LParserConstants.RESERVED_WORD_TRUE);
        TypeAndValueLogicConstants.add(LParserConstants.RESERVED_WORD_UNTRUE);
        IdentifierVariablesList.add(LParserConstants.IDENTIFIER);
        Index.add(LParserConstants.ESP_SYMBOL_L_BRACE);
        VariablesTypes.add(LParserConstants.RESERVED_WORD_INTEGER);
        VariablesTypes.add(LParserConstants.RESERVED_WORD_REAL);
        VariablesTypes.add(LParserConstants.RESERVED_WORD_STRING);
        VariablesTypes.add(LParserConstants.RESERVED_WORD_LOGIC);
        VariablesTypes.add(LParserConstants.RESERVED_WORD_DECLARATION);
        CmdAssignment.add(LParserConstants.RESERVED_WORD_DESIGNATE);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_EQUAL);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_DIFFERENT);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_GREATER);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_LESSER);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_LESSERREQUAL);
        ExpressionL.add(LParserConstants.ESP_SYMBOL_GREATEREQUAL);
        LowestPriority.add(LParserConstants.ESP_SYMBOL_PLUS);
        LowestPriority.add(LParserConstants.ESP_SYMBOL_MINUS);
        LowestPriority.add(LParserConstants.ESP_SYMBOL_OR);
        MediumPriority.add(LParserConstants.ESP_SYMBOL_STAR);
        MediumPriority.add(LParserConstants.ESP_SYMBOL_DIVISION_REAL);
        MediumPriority.add(LParserConstants.ESP_SYMBOL_DIVISION_INT);
        MediumPriority.add(LParserConstants.ESP_SYMBOL_MOD);
        MediumPriority.add(LParserConstants.ESP_SYMBOL_AND);
        HighestPriority.add(LParserConstants.ESP_SYMBOL_POWER);
        Element.add(LParserConstants.IDENTIFIER);
        Element.add(LParserConstants.CONST_INT);
        Element.add(LParserConstants.CONST_REAL);
        Element.add(LParserConstants.CONST_LITERAL);
        Element.add(LParserConstants.RESERVED_WORD_TRUE);
        Element.add(LParserConstants.RESERVED_WORD_UNTRUE);
        Element.add(LParserConstants.ESP_SYMBOL_L_PARENTHESIS);
        Element.add(LParserConstants.ESP_SYMBOL_DIFFERENT);
        CmdDataInput.add(LParserConstants.RESERVED_WORD_READ);
        CmdDataOutput.add(LParserConstants.RESERVED_WORD_WRITE);
        This.add(LParserConstants.RESERVED_WORD_THIS);
        AllThis.add(LParserConstants.RESERVED_WORD_ALL);
        IdentifiersAndOrConstantsList.add(LParserConstants.IDENTIFIER);
        IdentifiersAndOrConstantsList.add(LParserConstants.CONST_LITERAL);
        IdentifiersAndOrConstantsList.add(LParserConstants.CONST_INT);
        IdentifiersAndOrConstantsList.add(LParserConstants.CONST_REAL);
        OutPutConstants.add(LParserConstants.CONST_LITERAL);
        OutPutConstants.add(LParserConstants.CONST_INT);
        OutPutConstants.add(LParserConstants.CONST_REAL);
        CmdSelection.add(LParserConstants.RESERVED_WORD_AVALIATE);
        Evaluate.add(LParserConstants.RESERVED_WORD_TRUE);
        Evaluate.add(LParserConstants.RESERVED_WORD_UNTRUE);
        EvaluateTrue.add(LParserConstants.RESERVED_WORD_TRUE);
        EvaluateUntrue.add(LParserConstants.RESERVED_WORD_UNTRUE);
        Command.add(LParserConstants.RESERVED_WORD_DESIGNATE);
        Command.add(LParserConstants.RESERVED_WORD_READ);
        Command.add(LParserConstants.RESERVED_WORD_WRITE);
        Command.add(LParserConstants.RESERVED_WORD_AVALIATE);
        Command.add(LParserConstants.RESERVED_WORD_REPEAT);
        CmdRepetition.add(LParserConstants.RESERVED_WORD_REPEAT);
        EvaluateRep.add(LParserConstants.ESP_SYMBOL_L_BRACKET);
        EvaluateRepTrue.add(LParserConstants.ESP_SYMBOL_L_BRACKET);
        EvaluateRepUntrue.add(LParserConstants.ESP_SYMBOL_L_BRACKET);
    }

}

