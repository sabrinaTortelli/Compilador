options {
    STATIC = false;
    IGNORE_CASE = false;
}

PARSER_BEGIN(LParser)

package br.univali.compiladores.compilador.model.parser;

import br.univali.compiladores.compilador.model.LexicalAnalysis.LexicalAnalysis;
import br.univali.compiladores.compilador.view.WindowER;

public class LParser {
    private LexicalAnalysis lexicalAnalysis;
    private int errorCount;
    public int getErrorCount() {
        return errorCount;
    }
    public void setLexicalAnalysis(WindowER gui){
        lexicalAnalysis = new LexicalAnalysis(gui);
    }
}

PARSER_END(LParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <LINE_COMMENT:("#" (~["\n","\r"])* ("\n"|"\r"|"\r\n"))> /*LINE COMMENT*/
| <BLOCK_COMMENT: ("@" ((~["@"])*|"\n"|"\r"|"\r\n")* "@")>/*BLOCK COMMENT*/
}

TOKEN /*SPECIAL_SYMBOLS*/:
{
  <ESP_SYMBOL_L_BRACKET: "[">  
| <ESP_SYMBOL_R_BRACKET: "]"> 
| <ESP_SYMBOL_L_PARENTHESIS: "("> 
| <ESP_SYMBOL_R_PARENTHESIS: ")"> 
| <ESP_SYMBOL_L_BRACE: "{"> 
| <ESP_SYMBOL_R_BRACE: "}"> 
| <ESP_SYMBOL_DOT: "."> 
| <ESP_SYMBOL_COMA: ","> 
| <ESP_SYMBOL_ASSIGNE: "="> 
| <ESP_SYMBOL_PLUS: "+"> 
| <ESP_SYMBOL_MINUS: "-"> 
| <ESP_SYMBOL_STAR: "*"> 
| <ESP_SYMBOL_DIVISION_REAL: "/"> 
| <ESP_SYMBOL_POWER: "**"> 
| <ESP_SYMBOL_DIVISION_INT: "%"> 
| <ESP_SYMBOL_MOD: "%%"> 
| <ESP_SYMBOL_EQUAL: "=="> 
| <ESP_SYMBOL_DIFFERENT: "!="> 
| <ESP_SYMBOL_GREATER: ">>"> 
| <ESP_SYMBOL_LESSER: "<<"> 
| <ESP_SYMBOL_GREATEREQUAL: ">>="> 
| <ESP_SYMBOL_LESSERREQUAL: "<<="> 
| <ESP_SYMBOL_AND:  "&"> 
| <ESP_SYMBOL_OR:  "|"> 
| <ESP_SYMBOL_NOT: "!">
}

TOKEN /*RESERVED WORDS*/: 
{
  <RESERVED_WORD_DO:("D"|"d")("O"|"o")>
| <RESERVED_WORD_THIS:("T"|"t")("H"|"h")("I"|"i")("S"|"s")>
| <RESERVED_WORD_BODY:("B"|"b")("O"|"o")("D"|"d")("Y"|"y")>
| <RESERVED_WORD_DESCRIPTION:("D"|"d")("E"|"e")("S"|"s")("C"|"c")("R"|"r")("I"|"i")("P"|"p")("T"|"t")("I"|"i")("O"|"o")("N"|"n")>
| <RESERVED_WORD_DECLARATION: ("D"|"d")("E"|"e")("C"|"c")("L"|"l")("A"|"a")("R"|"r")("A"|"a")("T"|"t")("I"|"i")("O"|"o")("N"|"n")>
| <RESERVED_WORD_TYPE:("T"|"t")("Y"|"y")("P"|"p")("E"|"e")>
| <RESERVED_WORD_IS:("I"|"i")("S"|"s")>
| <RESERVED_WORD_CONSTANT:("C"|"c")("O"|"o")("N"|"n")("S"|"s")("T"|"t")("A"|"a")("N"|"n")("T"|"t")>
| <RESERVED_WORD_AND:("A"|"a")("N"|"n")("D"|"d")>
| <RESERVED_WORD_VARIABLE:("V"|"v")("A"|"a")("R"|"r")("I"|"i")("A"|"a")("B"|"b")("L"|"l")("E"|"e")>
| <RESERVED_WORD_AS:("A"|"a")("S"|"s")>
| <RESERVED_WORD_INTEGER:("I"|"i")("N"|"n")("T"|"t")("E"|"e")("G"|"g")("E"|"e")("R"|"r")>
| <RESERVED_WORD_REAL:("R"|"r")("E"|"e")("A"|"a")("L"|"l")>
| <RESERVED_WORD_STRING:("S"|"s")("T"|"t")("R"|"r")("I"|"i")("N"|"n")("G"|"g")>
| <RESERVED_WORD_LOGIC:("L"|"l")("O"|"o")("G"|"g")("I"|"i")("C"|"c")>
| <RESERVED_WORD_DESIGNATE:("D"|"d")("E"|"e")("S"|"s")("I"|"i")("G"|"g")("N"|"n")("A"|"a")("T"|"t")("E"|"e")>
| <RESERVED_WORD_READ:("R"|"r")("E"|"e")("A"|"a")("D"|"d")>
| <RESERVED_WORD_WRITE:("W"|"w")("R"|"r")("I"|"i")("T"|"t")("E"|"e")>
| <RESERVED_WORD_ALL:("A"|"a")("L"|"l")("L"|"l")>
| <RESERVED_WORD_REPEAT:("R"|"r")("E"|"e")("P"|"p")("E"|"e")("A"|"a")("T"|"t")>
| <RESERVED_WORD_AVALIATE:("A"|"a")("V"|"v")("A"|"a")("L"|"l")("I"|"i")("A"|"a")("T"|"t")("E"|"e")>
| <RESERVED_WORD_TRUE:("T"|"t")("R"|"r")("U"|"u")("E"|"e")>
| <RESERVED_WORD_UNTRUE:("U"|"u")("N"|"n")("T"|"t")("R"|"r")("U"|"u")("E"|"e")>
}

TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #LETTER : ["a"-"z","A"-"Z"] > }
TOKEN : { < #CAPSLETTER : ["A"-"Z"] > }
TOKEN : { < #LOWCAPSLETTER : ["a"-"z"] > }
TOKEN : { < #UNDER : ["_"] > }


TOKEN : /* INT */
{
  < CONST_INT: (<DIGIT>) | (<DIGIT>){2} | (<DIGIT>){3} >
}

TOKEN : /* REAL */
{
  < CONST_REAL: ((<DIGIT>) | (<DIGIT>){2} | (<DIGIT>){3} | (<DIGIT>){4} | (<DIGIT>){5}) "." ((<DIGIT>) | (<DIGIT>){2} | (<DIGIT>){3}) >
}

TOKEN : /* LITERAL */
{
  < CONST_LITERAL: ("\"" (~["\""])* "\"") | ("\'" (~["'"])* "\'") >
}

TOKEN : {
    /*<IDENTIFIER:(<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|(((<UNDER>)((<LETTER>)+(<DIGIT>){0,2}|(<DIGIT>){1,2}))|((<LETTER>)+(<DIGIT>){0,2}))*((<UNDER>)|(<LETTER>)+(<UNDER>)?)) >*/

    <IDENTIFIER:(<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*)>

}

TOKEN :
{
    < NONSUPPORTED_SYMBOL/* throws error for any token not listed bellow */:
    (~ ["a"-"z", "A"-"Z", "0"-"9", "@","\"", "'",
        "(", ")", "[", "]", "{", "}", ",", ".",
        ">", "<", "!", "+", "-", "*", "/", "%",
        "$", "#", " ", "\t", "\n","\r", "\f"]
    )+ >
|   < NONSUPPORTED_CONST_LITERAL_SINGLE/* throws error for any open and not closed single quote */:
    ("'" (~ ["'"])*)
    >
|   < NONSUPPORTED_CONST_LITERAL_DOUBLE/* throws error for any open and not closed double quote */:
    ("\"" (~ ["\""])*)
    >
|   < NONSUPPORTED_BLOCK_COMMENT/* throws error for any open and not closed block comment  */:
    ("@" ((~["@"])*|"\n"|"\r"|"\r\n")*)
    >
|   < NONSUPPORTED_IDENTIFIER/* throws error for non valid identifiers  */:
    (
        /*starting with low caps letter*/
        ((<LOWCAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        /*caps letter followed by 3 digits r2*/
        |((<CAPSLETTER>)((((<DIGIT>){2}(<DIGIT>)+((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        /*caps letter followed by 3 digits r4*/
        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){2}(<DIGIT>)+((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        /*caps letter followed by double_ or more*/
        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>){2}(<UNDER>)*|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>){2}(<UNDER>)*))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>){2}(<UNDER>)*))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))
        
        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>){2}(<UNDER>)+(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>){2}(<UNDER>)+)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>){2}(<UNDER>)*(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>){2}(<UNDER>)*|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>){2}(<UNDER>)*))|((<LETTER>)+(<UNDER>)?))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>){2}(<UNDER>)*))*))

        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>){2}(<UNDER>)*|(<UNDER>){2}(<UNDER>)*))|((<LETTER>)+(<UNDER>){2}(<UNDER>)*))*|((<UNDER>){2}(<UNDER>)*(<LETTER>)+(<UNDER>){2}(<UNDER>)*)*|((<UNDER>){2}(<UNDER>)*(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>){2}(<UNDER>)*|(<UNDER>){2}(<UNDER>)*))|((<LETTER>)+(<UNDER>){2}(<UNDER>)*))*))

        /*caps letter finishing with numbers*/
        |((<CAPSLETTER>)((((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*|((<UNDER>)(<LETTER>)+(<UNDER>)?)*|((<UNDER>)?(<LETTER>)*)(((<DIGIT>){1,2}((<LETTER>)+(<UNDER>)?|(<UNDER>)))|((<LETTER>)+(<UNDER>)?))*)(<DIGIT>)+)
    )
    >
}

public void parseLexical() : { }
{
    (
        nonsupportedBlockComment()
        | specialSymbol()
        | reservedWord()
        | constInt()
        | constReal()
        | constLiteral()
        | identifier()
        | nonsupportedSymbol()
        | nonsupportedConstLiteralSingle()
        | nonsupportedConstLiteralDouble()
        | nonsupportedIdentifier()
    )*
}

void specialSymbol() : { }
{
    (
        <ESP_SYMBOL_L_BRACKET>  
        | <ESP_SYMBOL_R_BRACKET> 
        | <ESP_SYMBOL_L_PARENTHESIS> 
        | <ESP_SYMBOL_R_PARENTHESIS> 
        | <ESP_SYMBOL_L_BRACE> 
        | <ESP_SYMBOL_R_BRACE> 
        | <ESP_SYMBOL_DOT> 
        | <ESP_SYMBOL_COMA> 
        | <ESP_SYMBOL_ASSIGNE> 
        | <ESP_SYMBOL_PLUS> 
        | <ESP_SYMBOL_MINUS> 
        | <ESP_SYMBOL_STAR> 
        | <ESP_SYMBOL_DIVISION_REAL> 
        | <ESP_SYMBOL_POWER> 
        | <ESP_SYMBOL_DIVISION_INT> 
        | <ESP_SYMBOL_MOD> 
        | <ESP_SYMBOL_EQUAL> 
        | <ESP_SYMBOL_DIFFERENT> 
        | <ESP_SYMBOL_GREATER> 
        | <ESP_SYMBOL_LESSER> 
        | <ESP_SYMBOL_GREATEREQUAL> 
        | <ESP_SYMBOL_LESSERREQUAL> 
        | <ESP_SYMBOL_AND> 
        | <ESP_SYMBOL_OR> 
        | <ESP_SYMBOL_NOT>
    )
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Simbolo Especial", token.kind, token.beginLine, token.beginColumn);
    }
}

void reservedWord() : { }
{
     (
          <RESERVED_WORD_DO>
        | <RESERVED_WORD_THIS>
        | <RESERVED_WORD_BODY>
        | <RESERVED_WORD_DESCRIPTION>
        | <RESERVED_WORD_DECLARATION>
        | <RESERVED_WORD_TYPE>
        | <RESERVED_WORD_IS>
        | <RESERVED_WORD_CONSTANT>
        | <RESERVED_WORD_AND>
        | <RESERVED_WORD_VARIABLE>
        | <RESERVED_WORD_AS>
        | <RESERVED_WORD_INTEGER>
        | <RESERVED_WORD_REAL>
        | <RESERVED_WORD_STRING>
        | <RESERVED_WORD_LOGIC>
        | <RESERVED_WORD_DESIGNATE>
        | <RESERVED_WORD_READ>
        | <RESERVED_WORD_WRITE>
        | <RESERVED_WORD_ALL>
        | <RESERVED_WORD_REPEAT>
        | <RESERVED_WORD_AVALIATE>
        | <RESERVED_WORD_TRUE>
        | <RESERVED_WORD_UNTRUE>
    )
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Palavra Reservada", token.kind, token.beginLine, token.beginColumn);

    }
}


void constInt() : { }
{
    <CONST_INT>
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Inteira", token.kind, token.beginLine, token.beginColumn);

    }
}

void constReal() : { }
{
    <CONST_REAL>
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Real", token.kind, token.beginLine, token.beginColumn);

    }
}

void constLiteral() : { }
{
    <CONST_LITERAL>
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Literal", token.kind, token.beginLine, token.beginColumn);

    }
}

void identifier() : { }
{
    <IDENTIFIER>
    {
        lexicalAnalysis.printRecognizedToken(token.image, "Identificador", token.kind, token.beginLine, token.beginColumn);

    }
}


void nonsupportedSymbol() : { errorCount++; }
{
    <NONSUPPORTED_SYMBOL>
    {
        lexicalAnalysis.printNotRecognizedToken(token.image, "Simbolo nao suportado", token.kind, token.beginLine, token.beginColumn);

    }
}

void nonsupportedConstLiteralSingle() : { errorCount++; }
{
    <NONSUPPORTED_CONST_LITERAL_SINGLE>
    {
        lexicalAnalysis.printNotRecognizedToken(token.image, "Constante literal nao suportada, faltando aspas simples", token.kind, token.beginLine, token.beginColumn);

    }
}

void nonsupportedConstLiteralDouble() : { errorCount++; }
{
    <NONSUPPORTED_CONST_LITERAL_DOUBLE>
    {
        lexicalAnalysis.printNotRecognizedToken(token.image, "Constante literal nao suportada. faltando aspas duplas", token.kind, token.beginLine, token.beginColumn);
;
    }
}

void nonsupportedBlockComment() : { errorCount++; }
{
    <NONSUPPORTED_BLOCK_COMMENT>
    {
        lexicalAnalysis.printNotRecognizedToken(token.image, "Nao contem o fechamento do bloco de comentario", token.kind, token.beginLine, token.beginColumn);

    }
}

void nonsupportedIdentifier() : { errorCount++; }
{
    <NONSUPPORTED_IDENTIFIER>
    {
        lexicalAnalysis.printNotRecognizedToken(token.image, "Identificador invalido", token.kind, token.beginLine, token.beginColumn);

    }
}