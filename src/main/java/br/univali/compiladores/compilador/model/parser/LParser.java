/* Generated By:JavaCC: Do not edit this line. LParser.java */
package br.univali.compiladores.compilador.model.parser;

import br.univali.compiladores.compilador.model.LexicalAnalysis.LexicalAnalysis;
import br.univali.compiladores.compilador.view.WindowER;

public class LParser implements LParserConstants {
    //errorCount mudou para lexErrorcount
    //getErrorCount mudou para getLexErrorCount
    //adicionado synErrorcount
    //adicionado synLexErrorCount

    private LexicalAnalysis lexicalAnalysis;
    private int lexErrorCount;
    private int synErrorCount;

    public int getLexErrorCount() {
        return lexErrorCount;
    }

    public int getSynErrorCount() {
        return synErrorCount;
    }


    public void setLexicalAnalysis(WindowER gui){
        lexicalAnalysis = new LexicalAnalysis(gui);
    }

  final public void parseSyntactical() throws ParseException {
    Program();
  }

  final public void Program() throws ParseException {
    jj_consume_token(RESERVED_WORD_DO);
    jj_consume_token(RESERVED_WORD_THIS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
    EnumeratedType();
    ConstantsAndVariables();
    jj_consume_token(RESERVED_WORD_BODY);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    CommandList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
    Description();
  }

  final public void Description() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DESCRIPTION:
      jj_consume_token(RESERVED_WORD_DESCRIPTION);
      jj_consume_token(CONST_LITERAL);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

//Tipo Enumerado ðŸ¡ª
  final public void EnumeratedType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DECLARATION:
      jj_consume_token(RESERVED_WORD_DECLARATION);
      jj_consume_token(RESERVED_WORD_TYPE);
      jj_consume_token(ESP_SYMBOL_L_BRACKET);
      ListEnumeratedType();
      jj_consume_token(ESP_SYMBOL_R_BRACKET);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void ListEnumeratedType() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(RESERVED_WORD_IS);
    IdConstantsList();
    jj_consume_token(ESP_SYMBOL_DOT);
    ListEnumeratedTypeL();
  }

  final public void ListEnumeratedTypeL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ListEnumeratedType();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

//Lista de Identificadores de ConstantesðŸ¡ª
  final public void IdConstantsList() throws ParseException {
    ConstantsList();
    IdConstantsListL();
  }

  final public void IdConstantsListL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_COMA:
      jj_consume_token(ESP_SYMBOL_COMA);
      IdConstantsList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void ConstantsList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Lista de Identificadores de VariÃ¡veisðŸ¡ª
  final public void IdentifiersVariablesList() throws ParseException {
    VariablesList();
    IdentifiersVariablesListL();
  }

  final public void IdentifiersVariablesListL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_COMA:
      jj_consume_token(ESP_SYMBOL_COMA);
      IdentifiersVariablesList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void VariablesList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Index();
  }

//Tipo de VariÃ¡veisðŸ¡ª
  final public void TypeVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_INTEGER:
      jj_consume_token(RESERVED_WORD_INTEGER);
      break;
    case RESERVED_WORD_REAL:
      jj_consume_token(RESERVED_WORD_REAL);
      break;
    case RESERVED_WORD_STRING:
      jj_consume_token(RESERVED_WORD_STRING);
      break;
    case RESERVED_WORD_LOGIC:
      jj_consume_token(RESERVED_WORD_LOGIC);
      break;
    case RESERVED_WORD_ENUM:
      jj_consume_token(RESERVED_WORD_ENUM);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Tipo de ConstantesðŸ¡ª
  final public void TypeAndValueConstants() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_INTEGER:
      jj_consume_token(RESERVED_WORD_INTEGER);
      jj_consume_token(ESP_SYMBOL_ASSIGNE);
      jj_consume_token(CONST_INT);
      break;
    case RESERVED_WORD_REAL:
      jj_consume_token(RESERVED_WORD_REAL);
      jj_consume_token(ESP_SYMBOL_ASSIGNE);
      jj_consume_token(CONST_REAL);
      break;
    case RESERVED_WORD_STRING:
      jj_consume_token(RESERVED_WORD_STRING);
      jj_consume_token(ESP_SYMBOL_ASSIGNE);
      jj_consume_token(CONST_LITERAL);
      break;
    case RESERVED_WORD_LOGIC:
      jj_consume_token(RESERVED_WORD_LOGIC);
      jj_consume_token(ESP_SYMBOL_ASSIGNE);
      TypeAndValueLogicConstants();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TypeAndValueLogicConstants() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_TRUE:
      jj_consume_token(RESERVED_WORD_TRUE);
      break;
    case RESERVED_WORD_UNTRUE:
      jj_consume_token(RESERVED_WORD_UNTRUE);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Constantes e VariÃ¡veis ðŸ¡ª
  final public void ConstantsAndVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DECLARATION:
      jj_consume_token(RESERVED_WORD_DECLARATION);
      jj_consume_token(RESERVED_WORD_CONSTANT);
      jj_consume_token(RESERVED_WORD_AND);
      jj_consume_token(RESERVED_WORD_VARIABLE);
      jj_consume_token(ESP_SYMBOL_L_BRACKET);
      OrderConstantsAndVariables();
      jj_consume_token(ESP_SYMBOL_R_BRACKET);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void OrderConstantsAndVariables() throws ParseException {
    jj_consume_token(RESERVED_WORD_AS);
    OrderConstantAndVariable();
  }

  final public void OrderConstantAndVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_CONSTANT:
      jj_consume_token(RESERVED_WORD_CONSTANT);
      ConstantsDec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_WORD_AS:
        jj_consume_token(RESERVED_WORD_AS);
        jj_consume_token(RESERVED_WORD_VARIABLE);
        VariablesDec();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    case RESERVED_WORD_VARIABLE:
      jj_consume_token(RESERVED_WORD_VARIABLE);
      VariablesDec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_WORD_AS:
        jj_consume_token(RESERVED_WORD_AS);
        jj_consume_token(RESERVED_WORD_CONSTANT);
        ConstantsDec();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConstantsDec() throws ParseException {
    IdConstantsList();
    jj_consume_token(RESERVED_WORD_IS);
    TypeAndValueConstants();
    jj_consume_token(ESP_SYMBOL_DOT);
    ConstantsDecL();
  }

  final public void ConstantsDecL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
    case CONST_REAL:
    case CONST_LITERAL:
      ConstantsDec();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void VariablesDec() throws ParseException {
    IdentifiersVariablesList();
    jj_consume_token(RESERVED_WORD_IS);
    TypeVariables();
    jj_consume_token(ESP_SYMBOL_DOT);
    VariablesDecL();
  }

  final public void VariablesDecL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
    case CONST_REAL:
    case CONST_LITERAL:
      VariablesDec();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

//AtribuiÃ§Ã£o ðŸ¡ª
  final public void Assignment() throws ParseException {
    jj_consume_token(RESERVED_WORD_DESIGNATE);
    jj_consume_token(RESERVED_WORD_THIS);
    IdentifiersVariablesList();
    jj_consume_token(RESERVED_WORD_AS);
    Expression();
    jj_consume_token(ESP_SYMBOL_DOT);
  }

//Entrada de dados ðŸ¡ª
  final public void DataInput() throws ParseException {
    jj_consume_token(RESERVED_WORD_READ);
    jj_consume_token(RESERVED_WORD_THIS);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    IdentifiersVariablesList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
    jj_consume_token(ESP_SYMBOL_DOT);
  }

//SaÃ­da de dados ðŸ¡ª
  final public void DataOutput() throws ParseException {
    jj_consume_token(RESERVED_WORD_WRITE);
    DataOutputL();
  }

  final public void DataOutputL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_ALL:
      jj_consume_token(RESERVED_WORD_ALL);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    DataOutputS();
  }

  final public void DataOutputS() throws ParseException {
    jj_consume_token(RESERVED_WORD_THIS);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    IdentifiersAndOrConstantsList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
    jj_consume_token(ESP_SYMBOL_DOT);
  }

//Lista de identificadores e/ou constantes ðŸ¡ª
  final public void IdentifiersAndOrConstantsList() throws ParseException {
    IdConstantsList();
    IdentifiersAndOrConstantsListL();
  }

  final public void IdentifiersAndOrConstantsListL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
    case CONST_REAL:
    case CONST_LITERAL:
      IdentifiersVariablesList();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

//SeleÃ§Ã£o ðŸ¡ª
  final public void Selection() throws ParseException {
    jj_consume_token(RESERVED_WORD_AVALIATE);
    jj_consume_token(RESERVED_WORD_THIS);
    Expression();
    Avaliation();
    jj_consume_token(ESP_SYMBOL_DOT);
  }

  final public void Avaliation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_TRUE:
      TrueResult();
      AvaliationLT();
      break;
    case RESERVED_WORD_UNTRUE:
      UntrueResult();
      AvaliationLU();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AvaliationLT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_UNTRUE:
      UntrueResult();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void AvaliationLU() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_TRUE:
      TrueResult();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void UntrueResult() throws ParseException {
    jj_consume_token(RESERVED_WORD_UNTRUE);
    jj_consume_token(RESERVED_WORD_RESULT);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    CommandList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
  }

  final public void TrueResult() throws ParseException {
    jj_consume_token(RESERVED_WORD_TRUE);
    jj_consume_token(RESERVED_WORD_RESULT);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    CommandList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
  }

//Lista de comandos ðŸ¡ª
  final public void CommandList() throws ParseException {
    Command();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DECLARATION:
      CommandN();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    CommandListL();
  }

  final public void CommandListL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DESIGNATE:
    case RESERVED_WORD_READ:
    case RESERVED_WORD_WRITE:
    case RESERVED_WORD_REPEAT:
    case RESERVED_WORD_AVALIATE:
      CommandList();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void Command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DESIGNATE:
      Assignment();
      break;
    case RESERVED_WORD_READ:
      DataInput();
      break;
    case RESERVED_WORD_WRITE:
      DataOutput();
      break;
    case RESERVED_WORD_AVALIATE:
      Selection();
      break;
    case RESERVED_WORD_REPEAT:
      Repetition();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CommandN() throws ParseException {
    jj_consume_token(RESERVED_WORD_DECLARATION);
    TwoCommands();
  }

  final public void TwoCommands() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_TYPE:
      EnumType();
      break;
    case RESERVED_WORD_CONSTANT:
      ConstAndVar();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EnumType() throws ParseException {
    jj_consume_token(RESERVED_WORD_TYPE);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    ListEnumeratedType();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
  }

  final public void ConstAndVar() throws ParseException {
    jj_consume_token(RESERVED_WORD_CONSTANT);
    jj_consume_token(RESERVED_WORD_AND);
    jj_consume_token(RESERVED_WORD_VARIABLE);
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    OrderConstantsAndVariables();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
  }

//RepetiÃ§Ã£o ðŸ¡ª
  final public void Repetition() throws ParseException {
    jj_consume_token(RESERVED_WORD_REPEAT);
    jj_consume_token(RESERVED_WORD_THIS);
    Expression();
    jj_consume_token(ESP_SYMBOL_L_BRACKET);
    CommandList();
    jj_consume_token(ESP_SYMBOL_R_BRACKET);
    jj_consume_token(ESP_SYMBOL_DOT);
  }

//ExpressÃ£o ðŸ¡ª
  final public void Expression() throws ParseException {
    ArithmeticOrLogicalExpression();
    ExpressionL();
  }

  final public void ExpressionL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_EQUAL:
    case ESP_SYMBOL_DIFFERENT:
    case ESP_SYMBOL_GREATER:
    case ESP_SYMBOL_LESSER:
    case ESP_SYMBOL_GREATEREQUAL:
    case ESP_SYMBOL_LESSERREQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESP_SYMBOL_EQUAL:
        jj_consume_token(ESP_SYMBOL_EQUAL);
        ArithmeticOrLogicalExpression();
        break;
      case ESP_SYMBOL_DIFFERENT:
        jj_consume_token(ESP_SYMBOL_DIFFERENT);
        ArithmeticOrLogicalExpression();
        break;
      case ESP_SYMBOL_GREATER:
        jj_consume_token(ESP_SYMBOL_GREATER);
        ArithmeticOrLogicalExpression();
        break;
      case ESP_SYMBOL_LESSER:
        jj_consume_token(ESP_SYMBOL_LESSER);
        ArithmeticOrLogicalExpression();
        break;
      case ESP_SYMBOL_LESSERREQUAL:
        jj_consume_token(ESP_SYMBOL_LESSERREQUAL);
        ArithmeticOrLogicalExpression();
        break;
      case ESP_SYMBOL_GREATEREQUAL:
        jj_consume_token(ESP_SYMBOL_GREATEREQUAL);
        ArithmeticOrLogicalExpression();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void ArithmeticOrLogicalExpression() throws ParseException {
    SecondTerm();
    LowestPriority();
  }

  final public void LowestPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_PLUS:
    case ESP_SYMBOL_MINUS:
    case ESP_SYMBOL_OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESP_SYMBOL_PLUS:
        jj_consume_token(ESP_SYMBOL_PLUS);
        SecondTerm();
        LowestPriority();
        break;
      case ESP_SYMBOL_MINUS:
        jj_consume_token(ESP_SYMBOL_MINUS);
        SecondTerm();
        LowestPriority();
        break;
      case ESP_SYMBOL_OR:
        jj_consume_token(ESP_SYMBOL_OR);
        SecondTerm();
        LowestPriority();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void SecondTerm() throws ParseException {
    FirstTerm();
    MediumPriority();
  }

  final public void MediumPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_STAR:
    case ESP_SYMBOL_DIVISION_REAL:
    case ESP_SYMBOL_DIVISION_INT:
    case ESP_SYMBOL_MOD:
    case ESP_SYMBOL_AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESP_SYMBOL_STAR:
        jj_consume_token(ESP_SYMBOL_STAR);
        FirstTerm();
        MediumPriority();
        break;
      case ESP_SYMBOL_DIVISION_REAL:
        jj_consume_token(ESP_SYMBOL_DIVISION_REAL);
        FirstTerm();
        MediumPriority();
        break;
      case ESP_SYMBOL_DIVISION_INT:
        jj_consume_token(ESP_SYMBOL_DIVISION_INT);
        FirstTerm();
        MediumPriority();
        break;
      case ESP_SYMBOL_MOD:
        jj_consume_token(ESP_SYMBOL_MOD);
        FirstTerm();
        MediumPriority();
        break;
      case ESP_SYMBOL_AND:
        jj_consume_token(ESP_SYMBOL_AND);
        FirstTerm();
        MediumPriority();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void FirstTerm() throws ParseException {
    Element();
    HighestPriority();
  }

  final public void HighestPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_POWER:
      jj_consume_token(ESP_SYMBOL_POWER);
      Element();
      HighestPriority();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void Element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      Index();
      break;
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    case RESERVED_WORD_TRUE:
      jj_consume_token(RESERVED_WORD_TRUE);
      break;
    case RESERVED_WORD_UNTRUE:
      jj_consume_token(RESERVED_WORD_UNTRUE);
      break;
    case ESP_SYMBOL_L_PARENTHESIS:
      jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
      Expression();
      jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
      break;
    case ESP_SYMBOL_DIFFERENT:
      jj_consume_token(ESP_SYMBOL_DIFFERENT);
      jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
      Expression();
      jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Index() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_L_BRACE:
      jj_consume_token(ESP_SYMBOL_L_BRACE);
      jj_consume_token(CONST_INT);
      jj_consume_token(ESP_SYMBOL_R_BRACE);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void parseLexical() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESP_SYMBOL_L_BRACKET:
      case ESP_SYMBOL_R_BRACKET:
      case ESP_SYMBOL_L_PARENTHESIS:
      case ESP_SYMBOL_R_PARENTHESIS:
      case ESP_SYMBOL_L_BRACE:
      case ESP_SYMBOL_R_BRACE:
      case ESP_SYMBOL_DOT:
      case ESP_SYMBOL_COMA:
      case ESP_SYMBOL_ASSIGNE:
      case ESP_SYMBOL_PLUS:
      case ESP_SYMBOL_MINUS:
      case ESP_SYMBOL_STAR:
      case ESP_SYMBOL_DIVISION_REAL:
      case ESP_SYMBOL_POWER:
      case ESP_SYMBOL_DIVISION_INT:
      case ESP_SYMBOL_MOD:
      case ESP_SYMBOL_EQUAL:
      case ESP_SYMBOL_DIFFERENT:
      case ESP_SYMBOL_GREATER:
      case ESP_SYMBOL_LESSER:
      case ESP_SYMBOL_GREATEREQUAL:
      case ESP_SYMBOL_LESSERREQUAL:
      case ESP_SYMBOL_AND:
      case ESP_SYMBOL_OR:
      case ESP_SYMBOL_NOT:
      case RESERVED_WORD_DO:
      case RESERVED_WORD_THIS:
      case RESERVED_WORD_BODY:
      case RESERVED_WORD_DESCRIPTION:
      case RESERVED_WORD_DECLARATION:
      case RESERVED_WORD_TYPE:
      case RESERVED_WORD_IS:
      case RESERVED_WORD_CONSTANT:
      case RESERVED_WORD_AND:
      case RESERVED_WORD_VARIABLE:
      case RESERVED_WORD_AS:
      case RESERVED_WORD_INTEGER:
      case RESERVED_WORD_REAL:
      case RESERVED_WORD_STRING:
      case RESERVED_WORD_LOGIC:
      case RESERVED_WORD_DESIGNATE:
      case RESERVED_WORD_READ:
      case RESERVED_WORD_WRITE:
      case RESERVED_WORD_ALL:
      case RESERVED_WORD_REPEAT:
      case RESERVED_WORD_AVALIATE:
      case RESERVED_WORD_TRUE:
      case RESERVED_WORD_UNTRUE:
      case CONST_INT:
      case CONST_REAL:
      case CONST_LITERAL:
      case IDENTIFIER:
      case NONSUPPORTED_SYMBOL:
      case NONSUPPORTED_CONST_LITERAL_SINGLE:
      case NONSUPPORTED_CONST_LITERAL_DOUBLE:
      case NONSUPPORTED_BLOCK_COMMENT:
      case NONSUPPORTED_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NONSUPPORTED_BLOCK_COMMENT:
        nonsupportedBlockComment();
        break;
      case ESP_SYMBOL_L_BRACKET:
      case ESP_SYMBOL_R_BRACKET:
      case ESP_SYMBOL_L_PARENTHESIS:
      case ESP_SYMBOL_R_PARENTHESIS:
      case ESP_SYMBOL_L_BRACE:
      case ESP_SYMBOL_R_BRACE:
      case ESP_SYMBOL_DOT:
      case ESP_SYMBOL_COMA:
      case ESP_SYMBOL_ASSIGNE:
      case ESP_SYMBOL_PLUS:
      case ESP_SYMBOL_MINUS:
      case ESP_SYMBOL_STAR:
      case ESP_SYMBOL_DIVISION_REAL:
      case ESP_SYMBOL_POWER:
      case ESP_SYMBOL_DIVISION_INT:
      case ESP_SYMBOL_MOD:
      case ESP_SYMBOL_EQUAL:
      case ESP_SYMBOL_DIFFERENT:
      case ESP_SYMBOL_GREATER:
      case ESP_SYMBOL_LESSER:
      case ESP_SYMBOL_GREATEREQUAL:
      case ESP_SYMBOL_LESSERREQUAL:
      case ESP_SYMBOL_AND:
      case ESP_SYMBOL_OR:
      case ESP_SYMBOL_NOT:
        specialSymbol();
        break;
      case RESERVED_WORD_DO:
      case RESERVED_WORD_THIS:
      case RESERVED_WORD_BODY:
      case RESERVED_WORD_DESCRIPTION:
      case RESERVED_WORD_DECLARATION:
      case RESERVED_WORD_TYPE:
      case RESERVED_WORD_IS:
      case RESERVED_WORD_CONSTANT:
      case RESERVED_WORD_AND:
      case RESERVED_WORD_VARIABLE:
      case RESERVED_WORD_AS:
      case RESERVED_WORD_INTEGER:
      case RESERVED_WORD_REAL:
      case RESERVED_WORD_STRING:
      case RESERVED_WORD_LOGIC:
      case RESERVED_WORD_DESIGNATE:
      case RESERVED_WORD_READ:
      case RESERVED_WORD_WRITE:
      case RESERVED_WORD_ALL:
      case RESERVED_WORD_REPEAT:
      case RESERVED_WORD_AVALIATE:
      case RESERVED_WORD_TRUE:
      case RESERVED_WORD_UNTRUE:
        reservedWord();
        break;
      case CONST_INT:
        constInt();
        break;
      case CONST_REAL:
        constReal();
        break;
      case CONST_LITERAL:
        constLiteral();
        break;
      case IDENTIFIER:
        identifier();
        break;
      case NONSUPPORTED_SYMBOL:
        nonsupportedSymbol();
        break;
      case NONSUPPORTED_CONST_LITERAL_SINGLE:
        nonsupportedConstLiteralSingle();
        break;
      case NONSUPPORTED_CONST_LITERAL_DOUBLE:
        nonsupportedConstLiteralDouble();
        break;
      case NONSUPPORTED_IDENTIFIER:
        nonsupportedIdentifier();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void specialSymbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESP_SYMBOL_L_BRACKET:
      jj_consume_token(ESP_SYMBOL_L_BRACKET);
      break;
    case ESP_SYMBOL_R_BRACKET:
      jj_consume_token(ESP_SYMBOL_R_BRACKET);
      break;
    case ESP_SYMBOL_L_PARENTHESIS:
      jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
      break;
    case ESP_SYMBOL_R_PARENTHESIS:
      jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
      break;
    case ESP_SYMBOL_L_BRACE:
      jj_consume_token(ESP_SYMBOL_L_BRACE);
      break;
    case ESP_SYMBOL_R_BRACE:
      jj_consume_token(ESP_SYMBOL_R_BRACE);
      break;
    case ESP_SYMBOL_DOT:
      jj_consume_token(ESP_SYMBOL_DOT);
      break;
    case ESP_SYMBOL_COMA:
      jj_consume_token(ESP_SYMBOL_COMA);
      break;
    case ESP_SYMBOL_ASSIGNE:
      jj_consume_token(ESP_SYMBOL_ASSIGNE);
      break;
    case ESP_SYMBOL_PLUS:
      jj_consume_token(ESP_SYMBOL_PLUS);
      break;
    case ESP_SYMBOL_MINUS:
      jj_consume_token(ESP_SYMBOL_MINUS);
      break;
    case ESP_SYMBOL_STAR:
      jj_consume_token(ESP_SYMBOL_STAR);
      break;
    case ESP_SYMBOL_DIVISION_REAL:
      jj_consume_token(ESP_SYMBOL_DIVISION_REAL);
      break;
    case ESP_SYMBOL_POWER:
      jj_consume_token(ESP_SYMBOL_POWER);
      break;
    case ESP_SYMBOL_DIVISION_INT:
      jj_consume_token(ESP_SYMBOL_DIVISION_INT);
      break;
    case ESP_SYMBOL_MOD:
      jj_consume_token(ESP_SYMBOL_MOD);
      break;
    case ESP_SYMBOL_EQUAL:
      jj_consume_token(ESP_SYMBOL_EQUAL);
      break;
    case ESP_SYMBOL_DIFFERENT:
      jj_consume_token(ESP_SYMBOL_DIFFERENT);
      break;
    case ESP_SYMBOL_GREATER:
      jj_consume_token(ESP_SYMBOL_GREATER);
      break;
    case ESP_SYMBOL_LESSER:
      jj_consume_token(ESP_SYMBOL_LESSER);
      break;
    case ESP_SYMBOL_GREATEREQUAL:
      jj_consume_token(ESP_SYMBOL_GREATEREQUAL);
      break;
    case ESP_SYMBOL_LESSERREQUAL:
      jj_consume_token(ESP_SYMBOL_LESSERREQUAL);
      break;
    case ESP_SYMBOL_AND:
      jj_consume_token(ESP_SYMBOL_AND);
      break;
    case ESP_SYMBOL_OR:
      jj_consume_token(ESP_SYMBOL_OR);
      break;
    case ESP_SYMBOL_NOT:
      jj_consume_token(ESP_SYMBOL_NOT);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        lexicalAnalysis.printRecognizedToken(token.image, "Simbolo Especial", token.kind, token.beginLine, token.beginColumn);
  }

  final public void reservedWord() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_WORD_DO:
      jj_consume_token(RESERVED_WORD_DO);
      break;
    case RESERVED_WORD_THIS:
      jj_consume_token(RESERVED_WORD_THIS);
      break;
    case RESERVED_WORD_BODY:
      jj_consume_token(RESERVED_WORD_BODY);
      break;
    case RESERVED_WORD_DESCRIPTION:
      jj_consume_token(RESERVED_WORD_DESCRIPTION);
      break;
    case RESERVED_WORD_DECLARATION:
      jj_consume_token(RESERVED_WORD_DECLARATION);
      break;
    case RESERVED_WORD_TYPE:
      jj_consume_token(RESERVED_WORD_TYPE);
      break;
    case RESERVED_WORD_IS:
      jj_consume_token(RESERVED_WORD_IS);
      break;
    case RESERVED_WORD_CONSTANT:
      jj_consume_token(RESERVED_WORD_CONSTANT);
      break;
    case RESERVED_WORD_AND:
      jj_consume_token(RESERVED_WORD_AND);
      break;
    case RESERVED_WORD_VARIABLE:
      jj_consume_token(RESERVED_WORD_VARIABLE);
      break;
    case RESERVED_WORD_AS:
      jj_consume_token(RESERVED_WORD_AS);
      break;
    case RESERVED_WORD_INTEGER:
      jj_consume_token(RESERVED_WORD_INTEGER);
      break;
    case RESERVED_WORD_REAL:
      jj_consume_token(RESERVED_WORD_REAL);
      break;
    case RESERVED_WORD_STRING:
      jj_consume_token(RESERVED_WORD_STRING);
      break;
    case RESERVED_WORD_LOGIC:
      jj_consume_token(RESERVED_WORD_LOGIC);
      break;
    case RESERVED_WORD_DESIGNATE:
      jj_consume_token(RESERVED_WORD_DESIGNATE);
      break;
    case RESERVED_WORD_READ:
      jj_consume_token(RESERVED_WORD_READ);
      break;
    case RESERVED_WORD_WRITE:
      jj_consume_token(RESERVED_WORD_WRITE);
      break;
    case RESERVED_WORD_ALL:
      jj_consume_token(RESERVED_WORD_ALL);
      break;
    case RESERVED_WORD_REPEAT:
      jj_consume_token(RESERVED_WORD_REPEAT);
      break;
    case RESERVED_WORD_AVALIATE:
      jj_consume_token(RESERVED_WORD_AVALIATE);
      break;
    case RESERVED_WORD_TRUE:
      jj_consume_token(RESERVED_WORD_TRUE);
      break;
    case RESERVED_WORD_UNTRUE:
      jj_consume_token(RESERVED_WORD_UNTRUE);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        lexicalAnalysis.printRecognizedToken(token.image, "Palavra Reservada", token.kind, token.beginLine, token.beginColumn);
  }

  final public void constInt() throws ParseException {
    jj_consume_token(CONST_INT);
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Inteira", token.kind, token.beginLine, token.beginColumn);
  }

  final public void constReal() throws ParseException {
    jj_consume_token(CONST_REAL);
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Real", token.kind, token.beginLine, token.beginColumn);
  }

  final public void constLiteral() throws ParseException {
    jj_consume_token(CONST_LITERAL);
        lexicalAnalysis.printRecognizedToken(token.image, "Constante Literal", token.kind, token.beginLine, token.beginColumn);
  }

  final public void identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
        lexicalAnalysis.printRecognizedToken(token.image, "Identificador", token.kind, token.beginLine, token.beginColumn);
  }

  final public void nonsupportedSymbol() throws ParseException {
                              lexErrorCount++;
    jj_consume_token(NONSUPPORTED_SYMBOL);
        lexicalAnalysis.printNotRecognizedToken(token.image, "Simbolo nao suportado", token.kind, token.beginLine, token.beginColumn);
  }

  final public void nonsupportedConstLiteralSingle() throws ParseException {
                                          lexErrorCount++;
    jj_consume_token(NONSUPPORTED_CONST_LITERAL_SINGLE);
        lexicalAnalysis.printNotRecognizedToken(token.image, "Constante literal nao suportada, faltando aspas simples", token.kind, token.beginLine, token.beginColumn);
  }

  final public void nonsupportedConstLiteralDouble() throws ParseException {
                                          lexErrorCount++;
    jj_consume_token(NONSUPPORTED_CONST_LITERAL_DOUBLE);
        lexicalAnalysis.printNotRecognizedToken(token.image, "Constante literal nao suportada. faltando aspas duplas", token.kind, token.beginLine, token.beginColumn);
;
  }

  final public void nonsupportedBlockComment() throws ParseException {
                                    lexErrorCount++;
    jj_consume_token(NONSUPPORTED_BLOCK_COMMENT);
        lexicalAnalysis.printNotRecognizedToken(token.image, "Nao contem o fechamento do bloco de comentario", token.kind, token.beginLine, token.beginColumn);
  }

  final public void nonsupportedIdentifier() throws ParseException {
                                  lexErrorCount++;
    jj_consume_token(NONSUPPORTED_IDENTIFIER);
        lexicalAnalysis.printNotRecognizedToken(token.image, "Identificador invalido", token.kind, token.beginLine, token.beginColumn);
  }

  /** Generated Token Manager. */
  public LParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f800000,0x1f800000,0x40030000,0x40030000,0x206c0000,0x206c0000,0x100000,0x1000200,0x800,0xffffff80,0xffffff80,0xffffff80,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x10,0x0,0x0,0xc0000000,0x0,0xc0000000,0xf800,0x7800,0xc00000,0x10,0x400,0x400,0x280,0xc0000000,0xc0000000,0x80000,0xc0000000,0xc00000,0x800000,0x400000,0x10,0x370000,0x370000,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0c00000,0x0,0xc0ff7fff,0xc0ff7fff,0x0,0xff7fff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x2,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x7f,0x7f,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LParser(LParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[71];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 71; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
