/* Generated By:JavaCC: Do not edit this line. LParser.java */
package br.univali.compiladores.compilador.model.parser;
import br.univali.compiladores.compilador.model.Compile.Compile;
import br.univali.compiladores.compilador.model.recovery.First;
import br.univali.compiladores.compilador.model.recovery.RecoverySet;
import br.univali.compiladores.compilador.model.recovery.ParseEOFException;
import br.univali.compiladores.compilador.view.WindowER;
import br.univali.compiladores.compilador.model.Compile.SemanticActions;

public class LParser implements LParserConstants {
    private Compile compile;
    private int lexErrorCount;
    private int synErrorCount;
    private SemanticActions semanticActions;


    //para o AS
    private boolean debug_recovery = true;
    private boolean eof; // indica se encontramos o end of file
    private Token lastError = null;

    static public String im(int x)
    {
        int k;
        String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\"");
            try{
                s =s.substring(1,k);
            }catch (StringIndexOutOfBoundsException e){
                System.err.println(e.getMessage());
            }
            return s;
    }

    void consumeUntil(RecoverySet g,ParseException e, String met) throws ParseEOFException, ParseException
    {
        Token tok;
        System.out.println("reading " + met);
        if (debug_recovery)
        {
            System.out.println();
            System.out.println("*** " + met + " ***");
            System.out.println("    Synchronizing Set: " + g);
        }
        if (g == null) throw e;
        tok = getToken(1);
        while (!eof)
        {
            if(g.contains(tok.kind))
                {
                    if(debug_recovery) System.out.println("    Found synchronizing token: " + im(tok.kind));
                    break;
                }
            if(debug_recovery)
                System.out.println("    Ignoring token: " + im(tok.kind));
            getNextToken();
            tok = getToken(1);
            if (tok.kind == EOF && !g.contains(EOF))
                eof = true;
        }
        if(tok != lastError)
        {
         System.out.println(e.getMessage());
         synErrorCount++;
         lastError = tok;
        }
        compile.printNotRecognized(g, e, met);

        //System.out.println(e.getMessage());
        //synErrorCount++;
        if (eof) throw  new ParseEOFException("EOF found prematurely");
    }

    public int getLexErrorCount() {
        return lexErrorCount;
    }

    public int getSynErrorCount() {
        return synErrorCount;
    }

    public SemanticActions getSemanticActions() {
        return semanticActions;
    }

    public void setLexicalAnalysis(WindowER gui){
        compile = new Compile(gui);
        semanticActions = new SemanticActions();
    }

  final public void parseSyntactical() throws ParseException, ParseEOFException {
    trace_call("parseSyntactical");
    try {
      readProgram();
    } finally {
      trace_return("parseSyntactical");
    }
  }

  final public void readProgram() throws ParseException, ParseEOFException {
    trace_call("readProgram");
    try {
    RecoverySet g = new RecoverySet(EOF);
      try {
        Program(g);
        jj_consume_token(0);
                          semanticActions.trigger2();
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do programa");
      }
    } finally {
      trace_return("readProgram");
    }
  }

  final public void Program(RecoverySet parentRecoverySet) throws ParseException, ParseEOFException {
    trace_call("Program");
    try {
RecoverySet firstOfDeclaration = new RecoverySet(RESERVED_WORD_DECLARATION);
            RecoverySet firstOfBodyProgram = new RecoverySet(RESERVED_WORD_BODY);
            RecoverySet firstOfComment = new RecoverySet(RESERVED_WORD_DESCRIPTION);

            RecoverySet programNameRecoverySet = new RecoverySet().union(firstOfDeclaration).union(firstOfBodyProgram).
                                                    union(firstOfComment).union(parentRecoverySet);
            RecoverySet declarationRecoverySet = new RecoverySet().union(firstOfBodyProgram).union(firstOfComment).
                                                    union(parentRecoverySet);
            RecoverySet programBodyRecoverySet = new RecoverySet().union(firstOfComment).union(parentRecoverySet);
      try {
        ProgramName(programNameRecoverySet);
        Declaration(declarationRecoverySet);
        ProgramBody(programBodyRecoverySet);
        Comment(parentRecoverySet);
      } catch (ParseException e) {
        consumeUntil(parentRecoverySet, e, "na declaracao do programa");
      }
    } finally {
      trace_return("Program");
    }
  }

  final public void ProgramName(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ProgramName");
    try {
    Token t1 = null;
      try {
        jj_consume_token(RESERVED_WORD_DO);
        jj_consume_token(RESERVED_WORD_THIS);
        t1 = jj_consume_token(IDENTIFIER);
                                                                  semanticActions.trigger1(t1);
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do nome do programa");
      }
    } finally {
      trace_return("ProgramName");
    }
  }

  final public void Comment(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Comment");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_DESCRIPTION:
          jj_consume_token(RESERVED_WORD_DESCRIPTION);
          jj_consume_token(CONST_LITERAL);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comentario");
      }
    } finally {
      trace_return("Comment");
    }
  }

  final public void Declaration(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Declaration");
    try {
 RecoverySet f1 = First.DeclarationL.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_DECLARATION:
          jj_consume_token(RESERVED_WORD_DECLARATION);
          DeclarationL(f1);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes, variaveis e tipos enumerados");
      }
    } finally {
      trace_return("Declaration");
    }
  }

  final public void DeclarationL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("DeclarationL");
    try {
 RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET).union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_TYPE:
          jj_consume_token(RESERVED_WORD_TYPE);
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          DeclarationEnumeratedType(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          DeclarationLL(g);
          break;
        case RESERVED_WORD_CONSTANT:
          DeclarationConstantsAndVariables(g);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes, variaveis e tipos enumerados");
      }
    } finally {
      trace_return("DeclarationL");
    }
  }

  final public void DeclarationLL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("DeclarationLL");
    try {
 RecoverySet f1 = First.DeclarationConstantsAndVariables.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_DECLARATION:
          jj_consume_token(RESERVED_WORD_DECLARATION);
          DeclarationConstantsAndVariables(f1);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes, variaveis e tipos enumerados");
      }
    } finally {
      trace_return("DeclarationLL");
    }
  }

//DeclarationEnumeratedType block
  final public void DeclarationEnumeratedType(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("DeclarationEnumeratedType");
    try {
 Token t1 = null;
 RecoverySet f1 = new RecoverySet(ESP_SYMBOL_DOT);
      try {
        t1 = jj_consume_token(IDENTIFIER);
                           semanticActions.trigger3(t1);
        jj_consume_token(RESERVED_WORD_IS);
        IdentifierEnumTypeDeclarationList(f1);
        jj_consume_token(ESP_SYMBOL_DOT);
        DeclarationEnumeratedTypeL(g);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao de tipos enumerados");
      }
    } finally {
      trace_return("DeclarationEnumeratedType");
    }
  }

  final public void DeclarationEnumeratedTypeL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("DeclarationEnumeratedTypeL");
    try {
 RecoverySet f1 = First.DeclarationEnumeratedType.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          DeclarationEnumeratedType(f1);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao de tipos enumerados");
      }
    } finally {
      trace_return("DeclarationEnumeratedTypeL");
    }
  }

  final public void IdentifierEnumTypeDeclarationList(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IdentifierEnumTypeDeclarationList");
    try {
  Token t1 = null;
      try {
        t1 = jj_consume_token(IDENTIFIER);
                          semanticActions.trigger4(t1);
        IdentifierEnumTypeDeclarationListL(g);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaraco de tipos enumerados");
      }
    } finally {
      trace_return("IdentifierEnumTypeDeclarationList");
    }
  }

  final public void IdentifierEnumTypeDeclarationListL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IdentifierEnumTypeDeclarationListL");
    try {
 RecoverySet f1 = First.IdentifierEnumTypeDeclarationList.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_COMA:
          jj_consume_token(ESP_SYMBOL_COMA);
          IdentifierEnumTypeDeclarationList(f1);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao de tipos enumerados");
      }
    } finally {
      trace_return("IdentifierEnumTypeDeclarationListL");
    }
  }

  final public void DeclarationConstantsAndVariables(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("DeclarationConstantsAndVariables");
    try {
    RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET).union(g);
      try {
        jj_consume_token(RESERVED_WORD_CONSTANT);
        jj_consume_token(RESERVED_WORD_AND);
        jj_consume_token(RESERVED_WORD_VARIABLE);
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        ConstantsAndVariables(f1);
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes e variaveis");
      }
    } finally {
      trace_return("DeclarationConstantsAndVariables");
    }
  }

  final public void ConstantsAndVariables(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ConstantsAndVariables");
    try {
      try {
        jj_consume_token(RESERVED_WORD_AS);
        ConstantAndVariablesL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes e variaveis");
      }
    } finally {
      trace_return("ConstantsAndVariables");
    }
  }

  final public void ConstantAndVariablesL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ConstantAndVariablesL");
    try {
 RecoverySet f1 = First.VariablesLL.union(g),
             f2 = First.ConstantsLL.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_CONSTANT:
          ConstantsDeclaration(f1);
          VariablesLL(g);
          break;
        case RESERVED_WORD_VARIABLE:
          VariablesDeclaration(f2);
          ConstantsLL(g);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes e variaveis");
      }
    } finally {
      trace_return("ConstantAndVariablesL");
    }
  }

// Constants Declaration sub block
  final public void ConstantsDeclaration(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ConstantsDeclaration");
    try {
      try {
        jj_consume_token(RESERVED_WORD_CONSTANT);
                                   semanticActions.trigger5("as constant");
        Constants(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes e variaveis");
      }
    } finally {
      trace_return("ConstantsDeclaration");
    }
  }

  final public void Constants(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Constants");
    try {
 Token t1, t2 =null;
  RecoverySet f1 = new RecoverySet(RESERVED_WORD_IS),
             f2 = new RecoverySet(ESP_SYMBOL_ASSIGNE),
             f3 = new RecoverySet(ESP_SYMBOL_DOT);
      try {
        IdentifierConstantsList(f1);
        jj_consume_token(RESERVED_WORD_IS);
        Type(f2);
                                                                  semanticActions.trigger6();
        jj_consume_token(ESP_SYMBOL_ASSIGNE);
        Value(f3);
                                          semanticActions.trigger7();
        jj_consume_token(ESP_SYMBOL_DOT);
        ConstantsL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes");
      }
    } finally {
      trace_return("Constants");
    }
  }

  final public void ConstantsL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ConstantsL");
    try {
 RecoverySet f1 = First.Constants.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Constants(f1);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes");
      }
    } finally {
      trace_return("ConstantsL");
    }
  }

  final public void ConstantsLL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ConstantsLL");
    try {
 RecoverySet f1 = First.ConstantsDeclaration.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_AS:
          jj_consume_token(RESERVED_WORD_AS);
          ConstantsDeclaration(f1);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes");
      }
    } finally {
      trace_return("ConstantsLL");
    }
  }

  final public void VariablesDeclaration(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VariablesDeclaration");
    try {
      try {
        jj_consume_token(RESERVED_WORD_VARIABLE);
                                   semanticActions.trigger8("as variable");
        Variables(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de variaveis");
      }
    } finally {
      trace_return("VariablesDeclaration");
    }
  }

  final public void Variables(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Variables");
    try {
 Token t1=null;
 RecoverySet f1 = new RecoverySet(RESERVED_WORD_IS),
             f2 = new RecoverySet(ESP_SYMBOL_DOT);
      try {
        VariablesIdentifiersList(f1);
        jj_consume_token(RESERVED_WORD_IS);
        Type(f2);
                                                                   semanticActions.trigger6();
        jj_consume_token(ESP_SYMBOL_DOT);
        VariablesL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de variaveis");
      }
    } finally {
      trace_return("Variables");
    }
  }

  final public void VariablesL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VariablesL");
    try {
 RecoverySet f1 = First.Variables.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Variables(f1);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de variaveis");
      }
    } finally {
      trace_return("VariablesL");
    }
  }

  final public void VariablesLL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VariablesLL");
    try {
 RecoverySet f1 = First.VariablesDeclaration.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_AS:
          jj_consume_token(RESERVED_WORD_AS);
          VariablesDeclaration(f1);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de variaveis");
      }
    } finally {
      trace_return("VariablesLL");
    }
  }

  final public void IdentifierConstantsList(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IdentifierConstantsList");
    try {
 Token t1=null;
      try {
        t1 = jj_consume_token(IDENTIFIER);
                          semanticActions.trigger9(t1);
        IdentifierConstantsListL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de identificadores de constantes");
      }
    } finally {
      trace_return("IdentifierConstantsList");
    }
  }

  final public void IdentifierConstantsListL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IdentifierConstantsListL");
    try {
 RecoverySet f1 = First.IdentifierConstantsList.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_COMA:
          jj_consume_token(ESP_SYMBOL_COMA);
          IdentifierConstantsList(f1);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de identificadores de constantes");
      }
    } finally {
      trace_return("IdentifierConstantsListL");
    }
  }

  final public void VariablesIdentifiersList(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VariablesIdentifiersList");
    try {
 Token t1=null;
 Token t2 = null;
 RecoverySet f1 = First.VariablesIdentifiersListL.union(g);
      try {
        t1 = jj_consume_token(IDENTIFIER);
                          semanticActions.trigger10(t1);
        Index(f1);
                                                                       semanticActions.trigger11();
        VariablesIdentifiersListL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declara\u00c3\u00a7\u00c3\u00a3o de identificadores de vari\u00c3\u00a1veis");
      }
    } finally {
      trace_return("VariablesIdentifiersList");
    }
  }

  final public void VariablesIdentifiersListL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VariablesIdentifiersListL");
    try {
 RecoverySet f1 = First.VariablesIdentifiersList.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_COMA:
          jj_consume_token(ESP_SYMBOL_COMA);
          VariablesIdentifiersList(f1);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de identificadores de variaveis");
      }
    } finally {
      trace_return("VariablesIdentifiersListL");
    }
  }

  final public void Index(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Index");
    try {
 Token t1=null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_L_BRACE:
          jj_consume_token(ESP_SYMBOL_L_BRACE);
          t1 = jj_consume_token(CONST_INT);
                                               semanticActions.trigger12(t1);
          jj_consume_token(ESP_SYMBOL_R_BRACE);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do indice");
      }
    } finally {
      trace_return("Index");
    }
  }

  final public void Type(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Type");
    try {
 Token t1 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_INTEGER:
          jj_consume_token(RESERVED_WORD_INTEGER);
                                   semanticActions.trigger13();
          break;
        case RESERVED_WORD_REAL:
          jj_consume_token(RESERVED_WORD_REAL);
                               semanticActions.trigger14();
          break;
        case RESERVED_WORD_STRING:
          jj_consume_token(RESERVED_WORD_STRING);
                                 semanticActions.trigger15();
          break;
        case RESERVED_WORD_LOGIC:
          t1 = jj_consume_token(RESERVED_WORD_LOGIC);
                                   semanticActions.trigger16(t1);
          break;
        case IDENTIFIER:
          t1 = jj_consume_token(IDENTIFIER);
                          semanticActions.trigger17(t1);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do tipo");
      }
    } finally {
      trace_return("Type");
    }
  }

  final public void Value(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Value");
    try {
 Token t1 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST_INT:
          t1 = jj_consume_token(CONST_INT);
                          semanticActions.trigger55(t1);
          break;
        case CONST_REAL:
          t1 = jj_consume_token(CONST_REAL);
                                                                               semanticActions.trigger56(t1);
          break;
        case CONST_LITERAL:
          t1 = jj_consume_token(CONST_LITERAL);
                               semanticActions.trigger57(t1);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao do valor");
      }
    } finally {
      trace_return("Value");
    }
  }

  final public void ProgramBody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ProgramBody");
    try {
  RecoverySet f6 = new RecoverySet(RESERVED_WORD_DESIGNATE),
              f5 = new RecoverySet(RESERVED_WORD_READ).union(f6),
              f4 = new RecoverySet(RESERVED_WORD_WRITE).union(f5),
              f3 = new RecoverySet(RESERVED_WORD_AVALIATE).union(f4),
              f2 = new RecoverySet(RESERVED_WORD_REPEAT).union(f3),
              f1 = new RecoverySet().union(f2).union(g);
      try {
        jj_consume_token(RESERVED_WORD_BODY);
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        CommandList(f1);
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao do corpo do programa");
      }
    } finally {
      trace_return("ProgramBody");
    }
  }

  final public void CommandList(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CommandList");
    try {
 RecoverySet f1 = First.CommandListL.union(g);
      try {
        Command(f1);
        CommandListL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao da lista de comandos");
      }
    } finally {
      trace_return("CommandList");
    }
  }

  final public void CommandListL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CommandListL");
    try {
 RecoverySet f1 = First.CommandList.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_DESIGNATE:
        case RESERVED_WORD_READ:
        case RESERVED_WORD_WRITE:
        case RESERVED_WORD_REPEAT:
        case RESERVED_WORD_AVALIATE:
          CommandList(f1);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao da lista de comandos");
      }
    } finally {
      trace_return("CommandListL");
    }
  }

  final public void Command(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Command");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_DESIGNATE:
          CmdAssignment(g);
          break;
        case RESERVED_WORD_READ:
          CmdDataInput(g);
          break;
        case RESERVED_WORD_WRITE:
          CmdDataOutput(g);
          break;
        case RESERVED_WORD_AVALIATE:
          CmdSelection(g);
          break;
        case RESERVED_WORD_REPEAT:
          CmdRepetition(g);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando");
      }
    } finally {
      trace_return("Command");
    }
  }

//Assignmeent block
  final public void CmdAssignment(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdAssignment");
    try {
 RecoverySet f1 = new RecoverySet(RESERVED_WORD_AS),
             f2 = new RecoverySet(ESP_SYMBOL_DOT);
      try {
        jj_consume_token(RESERVED_WORD_DESIGNATE);
        jj_consume_token(RESERVED_WORD_THIS);
                                                         semanticActions.trigger18("atribuicao");
        VariablesIdentifiersList(f1);
        jj_consume_token(RESERVED_WORD_AS);
        Expression(f2);
                                                                         semanticActions.trigger19();
        jj_consume_token(ESP_SYMBOL_DOT);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando de atribuicao");
      }
    } finally {
      trace_return("CmdAssignment");
    }
  }

//Data input block
  final public void CmdDataInput(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdDataInput");
    try {
 RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET);
      try {
        jj_consume_token(RESERVED_WORD_READ);
        jj_consume_token(RESERVED_WORD_THIS);
                                                    semanticActions.trigger20("entrada dados");
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        VariablesIdentifiersList(f1);
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
        jj_consume_token(ESP_SYMBOL_DOT);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando da entrada de dados");
      }
    } finally {
      trace_return("CmdDataInput");
    }
  }

//Data output block
  final public void CmdDataOutput(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdDataOutput");
    try {
      try {
        jj_consume_token(RESERVED_WORD_WRITE);
        CmdDataOutputL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando da saida de dados");
      }
    } finally {
      trace_return("CmdDataOutput");
    }
  }

  final public void CmdDataOutputL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdDataOutputL");
    try {
 RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_ALL:
          jj_consume_token(RESERVED_WORD_ALL);
          jj_consume_token(RESERVED_WORD_THIS);
                                                   semanticActions.trigger21("write all this");
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          IndentifierAndOrContantList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          jj_consume_token(ESP_SYMBOL_DOT);
          break;
        case RESERVED_WORD_THIS:
          jj_consume_token(RESERVED_WORD_THIS);
                                semanticActions.trigger22("write this");
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          IndentifierAndOrContantList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          jj_consume_token(ESP_SYMBOL_DOT);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao do comando da saida de dados");
      }
    } finally {
      trace_return("CmdDataOutputL");
    }
  }

  final public void IndentifierAndOrContantList(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IndentifierAndOrContantList");
    try {
 Token t1= null;
 RecoverySet f1 = First.IndentifierAndOrContantListL.union(g);
      try {
        Item(f1);
                   semanticActions.trigger23();
        IndentifierAndOrContantListL(g);
      } catch (ParseException e) {
        consumeUntil(g, e,"na declaracao de constantes e/ou variaveis");
      }
    } finally {
      trace_return("IndentifierAndOrContantList");
    }
  }

  final public void IndentifierAndOrContantListL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("IndentifierAndOrContantListL");
    try {
 RecoverySet f1 = First.IndentifierAndOrContantList.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_COMA:
          jj_consume_token(ESP_SYMBOL_COMA);
          IndentifierAndOrContantList(f1);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,"na declaracao de constantes e/ou variaveis");
      }
    } finally {
      trace_return("IndentifierAndOrContantListL");
    }
  }

  final public void Item(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Item");
    try {
 Token t1 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t1 = jj_consume_token(IDENTIFIER);
                           semanticActions.trigger24(t1);
          Index(g);
                                                                       semanticActions.trigger25(t1);
          break;
        case CONST_INT:
          t1 = jj_consume_token(CONST_INT);
                          semanticActions.trigger26(t1);
          break;
        case CONST_REAL:
          t1 = jj_consume_token(CONST_REAL);
                           semanticActions.trigger27(t1);
          break;
        case CONST_LITERAL:
          t1 = jj_consume_token(CONST_LITERAL);
                              semanticActions.trigger28(t1);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao de constantes e/ou variaveis");
      }
    } finally {
      trace_return("Item");
    }
  }

//Selection command block
  final public void CmdSelection(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdSelection");
    try {
    RecoverySet f1 = First.CmdSelectionL.union(g);
      try {
        jj_consume_token(RESERVED_WORD_AVALIATE);
        jj_consume_token(RESERVED_WORD_THIS);
        Expression(f1);
        CmdSelectionL(g);
                                                                                        semanticActions.trigger29();
      } catch (ParseException e) {
        consumeUntil(g, e,"na declaracao do comando de selecao");
      }
    } finally {
      trace_return("CmdSelection");
    }
  }

  final public void CmdSelectionL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdSelectionL");
    try {
    RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET),
                f2 = new RecoverySet(ESP_SYMBOL_DOT);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_TRUE:
          jj_consume_token(RESERVED_WORD_TRUE);
          jj_consume_token(RESERVED_WORD_RESULT);
                                                      semanticActions.trigger30();
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          CommandList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          False(f2);
          jj_consume_token(ESP_SYMBOL_DOT);
          break;
        case RESERVED_WORD_UNTRUE:
          jj_consume_token(RESERVED_WORD_UNTRUE);
          jj_consume_token(RESERVED_WORD_RESULT);
                                                         semanticActions.trigger31();
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          CommandList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          True(f2);
          jj_consume_token(ESP_SYMBOL_DOT);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e,"na declaracao do comando de selecao");
      }
    } finally {
      trace_return("CmdSelectionL");
    }
  }

  final public void True(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("True");
    try {
 Token t1=null;
    RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_TRUE:
          jj_consume_token(RESERVED_WORD_TRUE);
          jj_consume_token(RESERVED_WORD_RESULT);
                                                       semanticActions.trigger32();
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          CommandList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando de selecao");
      }
    } finally {
      trace_return("True");
    }
  }

  final public void False(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("False");
    try {
 Token t1=null;
    RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_BRACKET);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVED_WORD_UNTRUE:
          jj_consume_token(RESERVED_WORD_UNTRUE);
          jj_consume_token(RESERVED_WORD_RESULT);
                                                         semanticActions.trigger32();
          jj_consume_token(ESP_SYMBOL_L_BRACKET);
          CommandList(f1);
          jj_consume_token(ESP_SYMBOL_R_BRACKET);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando de selecao");
      }
    } finally {
      trace_return("False");
    }
  }

  final public void CmdRepetition(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CmdRepetition");
    try {
RecoverySet f1 = new RecoverySet(ESP_SYMBOL_L_BRACKET),
            f2 = new RecoverySet(ESP_SYMBOL_R_BRACKET);
      try {
        jj_consume_token(RESERVED_WORD_REPEAT);
        jj_consume_token(RESERVED_WORD_THIS);
                                                      semanticActions.trigger33();
        Expression(f1);
           semanticActions.trigger34();
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        CommandList(f2);
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
                                  semanticActions.trigger35();
        jj_consume_token(ESP_SYMBOL_DOT);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao do comando de repeticao");
      }
    } finally {
      trace_return("CmdRepetition");
    }
  }

  final public void Expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Expression");
    try {
    RecoverySet f1 = First.ExpressionL.union(g);
      try {
        ArithmeticOrLogicalExpression(f1);
        ExpressionL(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "na declaracao da expressao");
      }
    } finally {
      trace_return("Expression");
    }
  }

  final public void ExpressionL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ExpressionL");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_EQUAL:
        case ESP_SYMBOL_DIFFERENT:
        case ESP_SYMBOL_GREATER:
        case ESP_SYMBOL_LESSER:
        case ESP_SYMBOL_GREATEREQUAL:
        case ESP_SYMBOL_LESSERREQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESP_SYMBOL_EQUAL:
            jj_consume_token(ESP_SYMBOL_EQUAL);
            ArithmeticOrLogicalExpression(g);
                                                                 semanticActions.trigger36();
            break;
          case ESP_SYMBOL_DIFFERENT:
            jj_consume_token(ESP_SYMBOL_DIFFERENT);
            ArithmeticOrLogicalExpression(g);
                                                                    semanticActions.trigger37();
            break;
          case ESP_SYMBOL_GREATER:
            jj_consume_token(ESP_SYMBOL_GREATER);
            ArithmeticOrLogicalExpression(g);
                                                                   semanticActions.trigger38();
            break;
          case ESP_SYMBOL_LESSER:
            jj_consume_token(ESP_SYMBOL_LESSER);
            ArithmeticOrLogicalExpression(g);
                                                                 semanticActions.trigger39();
            break;
          case ESP_SYMBOL_LESSERREQUAL:
            jj_consume_token(ESP_SYMBOL_LESSERREQUAL);
            ArithmeticOrLogicalExpression(g);
                                                                       semanticActions.trigger40();
            break;
          case ESP_SYMBOL_GREATEREQUAL:
            jj_consume_token(ESP_SYMBOL_GREATEREQUAL);
            ArithmeticOrLogicalExpression(g);
                                                                       semanticActions.trigger41();
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("ExpressionL");
    }
  }

  final public void ArithmeticOrLogicalExpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ArithmeticOrLogicalExpression");
    try {
    RecoverySet f1 = First.LowestPriority.union(g);
      try {
        SecondTerm(f1);
        LowestPriority(g);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("ArithmeticOrLogicalExpression");
    }
  }

  final public void LowestPriority(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("LowestPriority");
    try {
 Token t1, t2, t3 = null;
 RecoverySet f1 = First.LowestPriority.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_PLUS:
        case ESP_SYMBOL_MINUS:
        case ESP_SYMBOL_OR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESP_SYMBOL_PLUS:
            jj_consume_token(ESP_SYMBOL_PLUS);
            SecondTerm(f1);
            LowestPriority(g);
                                                               semanticActions.trigger42();
            break;
          case ESP_SYMBOL_MINUS:
            jj_consume_token(ESP_SYMBOL_MINUS);
            SecondTerm(f1);
            LowestPriority(g);
                                                                semanticActions.trigger43();
            break;
          case ESP_SYMBOL_OR:
            jj_consume_token(ESP_SYMBOL_OR);
            SecondTerm(f1);
            LowestPriority(g);
                                                             semanticActions.trigger44();
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("LowestPriority");
    }
  }

  final public void SecondTerm(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("SecondTerm");
    try {
 RecoverySet f1 = First.MediumPriority.union(g);
      try {
        FirstTerm(f1);
        MediumPriority(g);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("SecondTerm");
    }
  }

  final public void MediumPriority(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("MediumPriority");
    try {
 RecoverySet f1 = First.MediumPriority.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_STAR:
        case ESP_SYMBOL_DIVISION_REAL:
        case ESP_SYMBOL_DIVISION_INT:
        case ESP_SYMBOL_MOD:
        case ESP_SYMBOL_AND:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESP_SYMBOL_STAR:
            jj_consume_token(ESP_SYMBOL_STAR);
            FirstTerm(f1);
            MediumPriority(g);
                                                              semanticActions.trigger45();
            break;
          case ESP_SYMBOL_DIVISION_REAL:
            jj_consume_token(ESP_SYMBOL_DIVISION_REAL);
            FirstTerm(f1);
            MediumPriority(g);
                                                                       semanticActions.trigger46();
            break;
          case ESP_SYMBOL_DIVISION_INT:
            jj_consume_token(ESP_SYMBOL_DIVISION_INT);
            FirstTerm(f1);
            MediumPriority(g);
                                                                      semanticActions.trigger47();
            break;
          case ESP_SYMBOL_MOD:
            jj_consume_token(ESP_SYMBOL_MOD);
            FirstTerm(f1);
            MediumPriority(g);
                                                             semanticActions.trigger48();
            break;
          case ESP_SYMBOL_AND:
            jj_consume_token(ESP_SYMBOL_AND);
            FirstTerm(f1);
            MediumPriority(g);
                                                             semanticActions.trigger49();
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("MediumPriority");
    }
  }

  final public void FirstTerm(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("FirstTerm");
    try {
 RecoverySet f1 = First.HighestPriority.union(g);
      try {
        Element(f1);
        HighestPriority(g);
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("FirstTerm");
    }
  }

  final public void HighestPriority(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("HighestPriority");
    try {
 RecoverySet f1 = First.HighestPriority.union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_POWER:
          jj_consume_token(ESP_SYMBOL_POWER);
          Element(f1);
          HighestPriority(g);
                                                             semanticActions.trigger50();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("HighestPriority");
    }
  }

  final public void Element(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("Element");
    try {
 Token t1, t2, t3, t4 = null;
 RecoverySet f1 = new RecoverySet(ESP_SYMBOL_R_PARENTHESIS).union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t1 = jj_consume_token(IDENTIFIER);
                          semanticActions.trigger24(t1);
          Index(g);
                                                                      semanticActions.trigger51(t1);
          break;
        case CONST_INT:
          t2 = jj_consume_token(CONST_INT);
                           semanticActions.trigger26(t2);
          break;
        case CONST_REAL:
          t3 = jj_consume_token(CONST_REAL);
                            semanticActions.trigger27(t3);
          break;
        case CONST_LITERAL:
          t4 = jj_consume_token(CONST_LITERAL);
                                semanticActions.trigger28(t4);
          break;
        case RESERVED_WORD_TRUE:
          jj_consume_token(RESERVED_WORD_TRUE);
                                  semanticActions.trigger52();
          break;
        case RESERVED_WORD_UNTRUE:
          jj_consume_token(RESERVED_WORD_UNTRUE);
                                    semanticActions.trigger53();
          break;
        case ESP_SYMBOL_L_PARENTHESIS:
          jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
          Expression(f1);
          jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
          break;
        case ESP_SYMBOL_NOT:
          jj_consume_token(ESP_SYMBOL_NOT);
          jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
          Expression(f1);
          jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
                                                                                                  semanticActions.trigger54();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e,  "na declaracao da expressao");
      }
    } finally {
      trace_return("Element");
    }
  }

  final public void parseLexical() throws ParseException {
    trace_call("parseLexical");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESP_SYMBOL_L_BRACKET:
        case ESP_SYMBOL_R_BRACKET:
        case ESP_SYMBOL_L_PARENTHESIS:
        case ESP_SYMBOL_R_PARENTHESIS:
        case ESP_SYMBOL_L_BRACE:
        case ESP_SYMBOL_R_BRACE:
        case ESP_SYMBOL_DOT:
        case ESP_SYMBOL_COMA:
        case ESP_SYMBOL_ASSIGNE:
        case ESP_SYMBOL_PLUS:
        case ESP_SYMBOL_MINUS:
        case ESP_SYMBOL_STAR:
        case ESP_SYMBOL_DIVISION_REAL:
        case ESP_SYMBOL_POWER:
        case ESP_SYMBOL_DIVISION_INT:
        case ESP_SYMBOL_MOD:
        case ESP_SYMBOL_EQUAL:
        case ESP_SYMBOL_DIFFERENT:
        case ESP_SYMBOL_GREATER:
        case ESP_SYMBOL_LESSER:
        case ESP_SYMBOL_GREATEREQUAL:
        case ESP_SYMBOL_LESSERREQUAL:
        case ESP_SYMBOL_AND:
        case ESP_SYMBOL_OR:
        case ESP_SYMBOL_NOT:
        case RESERVED_WORD_DO:
        case RESERVED_WORD_THIS:
        case RESERVED_WORD_BODY:
        case RESERVED_WORD_DESCRIPTION:
        case RESERVED_WORD_DECLARATION:
        case RESERVED_WORD_TYPE:
        case RESERVED_WORD_IS:
        case RESERVED_WORD_CONSTANT:
        case RESERVED_WORD_AND:
        case RESERVED_WORD_VARIABLE:
        case RESERVED_WORD_AS:
        case RESERVED_WORD_INTEGER:
        case RESERVED_WORD_REAL:
        case RESERVED_WORD_STRING:
        case RESERVED_WORD_LOGIC:
        case RESERVED_WORD_DESIGNATE:
        case RESERVED_WORD_READ:
        case RESERVED_WORD_WRITE:
        case RESERVED_WORD_ALL:
        case RESERVED_WORD_REPEAT:
        case RESERVED_WORD_AVALIATE:
        case RESERVED_WORD_RESULT:
        case RESERVED_WORD_TRUE:
        case RESERVED_WORD_UNTRUE:
        case CONST_INT:
        case CONST_REAL:
        case CONST_LITERAL:
        case IDENTIFIER:
        case NONSUPPORTED_SYMBOL:
        case NONSUPPORTED_CONST_LITERAL_SINGLE:
        case NONSUPPORTED_CONST_LITERAL_DOUBLE:
        case NONSUPPORTED_BLOCK_COMMENT:
        case NONSUPPORTED_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NONSUPPORTED_BLOCK_COMMENT:
          nonsupportedBlockComment();
          break;
        case ESP_SYMBOL_L_BRACKET:
        case ESP_SYMBOL_R_BRACKET:
        case ESP_SYMBOL_L_PARENTHESIS:
        case ESP_SYMBOL_R_PARENTHESIS:
        case ESP_SYMBOL_L_BRACE:
        case ESP_SYMBOL_R_BRACE:
        case ESP_SYMBOL_DOT:
        case ESP_SYMBOL_COMA:
        case ESP_SYMBOL_ASSIGNE:
        case ESP_SYMBOL_PLUS:
        case ESP_SYMBOL_MINUS:
        case ESP_SYMBOL_STAR:
        case ESP_SYMBOL_DIVISION_REAL:
        case ESP_SYMBOL_POWER:
        case ESP_SYMBOL_DIVISION_INT:
        case ESP_SYMBOL_MOD:
        case ESP_SYMBOL_EQUAL:
        case ESP_SYMBOL_DIFFERENT:
        case ESP_SYMBOL_GREATER:
        case ESP_SYMBOL_LESSER:
        case ESP_SYMBOL_GREATEREQUAL:
        case ESP_SYMBOL_LESSERREQUAL:
        case ESP_SYMBOL_AND:
        case ESP_SYMBOL_OR:
        case ESP_SYMBOL_NOT:
          specialSymbol();
          break;
        case RESERVED_WORD_DO:
        case RESERVED_WORD_THIS:
        case RESERVED_WORD_BODY:
        case RESERVED_WORD_DESCRIPTION:
        case RESERVED_WORD_DECLARATION:
        case RESERVED_WORD_TYPE:
        case RESERVED_WORD_IS:
        case RESERVED_WORD_CONSTANT:
        case RESERVED_WORD_AND:
        case RESERVED_WORD_VARIABLE:
        case RESERVED_WORD_AS:
        case RESERVED_WORD_INTEGER:
        case RESERVED_WORD_REAL:
        case RESERVED_WORD_STRING:
        case RESERVED_WORD_LOGIC:
        case RESERVED_WORD_DESIGNATE:
        case RESERVED_WORD_READ:
        case RESERVED_WORD_WRITE:
        case RESERVED_WORD_ALL:
        case RESERVED_WORD_REPEAT:
        case RESERVED_WORD_AVALIATE:
        case RESERVED_WORD_RESULT:
        case RESERVED_WORD_TRUE:
        case RESERVED_WORD_UNTRUE:
          reservedWord();
          break;
        case CONST_INT:
          constInt();
          break;
        case CONST_REAL:
          constReal();
          break;
        case CONST_LITERAL:
          constLiteral();
          break;
        case IDENTIFIER:
          identifier();
          break;
        case NONSUPPORTED_SYMBOL:
          nonsupportedSymbol();
          break;
        case NONSUPPORTED_CONST_LITERAL_SINGLE:
          nonsupportedConstLiteralSingle();
          break;
        case NONSUPPORTED_CONST_LITERAL_DOUBLE:
          nonsupportedConstLiteralDouble();
          break;
        case NONSUPPORTED_IDENTIFIER:
          nonsupportedIdentifier();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("parseLexical");
    }
  }

  final public void specialSymbol() throws ParseException {
    trace_call("specialSymbol");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESP_SYMBOL_L_BRACKET:
        jj_consume_token(ESP_SYMBOL_L_BRACKET);
        break;
      case ESP_SYMBOL_R_BRACKET:
        jj_consume_token(ESP_SYMBOL_R_BRACKET);
        break;
      case ESP_SYMBOL_L_PARENTHESIS:
        jj_consume_token(ESP_SYMBOL_L_PARENTHESIS);
        break;
      case ESP_SYMBOL_R_PARENTHESIS:
        jj_consume_token(ESP_SYMBOL_R_PARENTHESIS);
        break;
      case ESP_SYMBOL_L_BRACE:
        jj_consume_token(ESP_SYMBOL_L_BRACE);
        break;
      case ESP_SYMBOL_R_BRACE:
        jj_consume_token(ESP_SYMBOL_R_BRACE);
        break;
      case ESP_SYMBOL_DOT:
        jj_consume_token(ESP_SYMBOL_DOT);
        break;
      case ESP_SYMBOL_COMA:
        jj_consume_token(ESP_SYMBOL_COMA);
        break;
      case ESP_SYMBOL_ASSIGNE:
        jj_consume_token(ESP_SYMBOL_ASSIGNE);
        break;
      case ESP_SYMBOL_PLUS:
        jj_consume_token(ESP_SYMBOL_PLUS);
        break;
      case ESP_SYMBOL_MINUS:
        jj_consume_token(ESP_SYMBOL_MINUS);
        break;
      case ESP_SYMBOL_STAR:
        jj_consume_token(ESP_SYMBOL_STAR);
        break;
      case ESP_SYMBOL_DIVISION_REAL:
        jj_consume_token(ESP_SYMBOL_DIVISION_REAL);
        break;
      case ESP_SYMBOL_POWER:
        jj_consume_token(ESP_SYMBOL_POWER);
        break;
      case ESP_SYMBOL_DIVISION_INT:
        jj_consume_token(ESP_SYMBOL_DIVISION_INT);
        break;
      case ESP_SYMBOL_MOD:
        jj_consume_token(ESP_SYMBOL_MOD);
        break;
      case ESP_SYMBOL_EQUAL:
        jj_consume_token(ESP_SYMBOL_EQUAL);
        break;
      case ESP_SYMBOL_DIFFERENT:
        jj_consume_token(ESP_SYMBOL_DIFFERENT);
        break;
      case ESP_SYMBOL_GREATER:
        jj_consume_token(ESP_SYMBOL_GREATER);
        break;
      case ESP_SYMBOL_LESSER:
        jj_consume_token(ESP_SYMBOL_LESSER);
        break;
      case ESP_SYMBOL_GREATEREQUAL:
        jj_consume_token(ESP_SYMBOL_GREATEREQUAL);
        break;
      case ESP_SYMBOL_LESSERREQUAL:
        jj_consume_token(ESP_SYMBOL_LESSERREQUAL);
        break;
      case ESP_SYMBOL_AND:
        jj_consume_token(ESP_SYMBOL_AND);
        break;
      case ESP_SYMBOL_OR:
        jj_consume_token(ESP_SYMBOL_OR);
        break;
      case ESP_SYMBOL_NOT:
        jj_consume_token(ESP_SYMBOL_NOT);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }

    } finally {
      trace_return("specialSymbol");
    }
  }

  final public void reservedWord() throws ParseException {
    trace_call("reservedWord");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_WORD_DO:
        jj_consume_token(RESERVED_WORD_DO);
        break;
      case RESERVED_WORD_THIS:
        jj_consume_token(RESERVED_WORD_THIS);
        break;
      case RESERVED_WORD_BODY:
        jj_consume_token(RESERVED_WORD_BODY);
        break;
      case RESERVED_WORD_DESCRIPTION:
        jj_consume_token(RESERVED_WORD_DESCRIPTION);
        break;
      case RESERVED_WORD_DECLARATION:
        jj_consume_token(RESERVED_WORD_DECLARATION);
        break;
      case RESERVED_WORD_TYPE:
        jj_consume_token(RESERVED_WORD_TYPE);
        break;
      case RESERVED_WORD_IS:
        jj_consume_token(RESERVED_WORD_IS);
        break;
      case RESERVED_WORD_CONSTANT:
        jj_consume_token(RESERVED_WORD_CONSTANT);
        break;
      case RESERVED_WORD_AND:
        jj_consume_token(RESERVED_WORD_AND);
        break;
      case RESERVED_WORD_VARIABLE:
        jj_consume_token(RESERVED_WORD_VARIABLE);
        break;
      case RESERVED_WORD_AS:
        jj_consume_token(RESERVED_WORD_AS);
        break;
      case RESERVED_WORD_INTEGER:
        jj_consume_token(RESERVED_WORD_INTEGER);
        break;
      case RESERVED_WORD_REAL:
        jj_consume_token(RESERVED_WORD_REAL);
        break;
      case RESERVED_WORD_STRING:
        jj_consume_token(RESERVED_WORD_STRING);
        break;
      case RESERVED_WORD_LOGIC:
        jj_consume_token(RESERVED_WORD_LOGIC);
        break;
      case RESERVED_WORD_DESIGNATE:
        jj_consume_token(RESERVED_WORD_DESIGNATE);
        break;
      case RESERVED_WORD_READ:
        jj_consume_token(RESERVED_WORD_READ);
        break;
      case RESERVED_WORD_WRITE:
        jj_consume_token(RESERVED_WORD_WRITE);
        break;
      case RESERVED_WORD_ALL:
        jj_consume_token(RESERVED_WORD_ALL);
        break;
      case RESERVED_WORD_REPEAT:
        jj_consume_token(RESERVED_WORD_REPEAT);
        break;
      case RESERVED_WORD_AVALIATE:
        jj_consume_token(RESERVED_WORD_AVALIATE);
        break;
      case RESERVED_WORD_RESULT:
        jj_consume_token(RESERVED_WORD_RESULT);
        break;
      case RESERVED_WORD_TRUE:
        jj_consume_token(RESERVED_WORD_TRUE);
        break;
      case RESERVED_WORD_UNTRUE:
        jj_consume_token(RESERVED_WORD_UNTRUE);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }

    } finally {
      trace_return("reservedWord");
    }
  }

  final public void constInt() throws ParseException {
    trace_call("constInt");
    try {
      jj_consume_token(CONST_INT);

    } finally {
      trace_return("constInt");
    }
  }

  final public void constReal() throws ParseException {
    trace_call("constReal");
    try {
      jj_consume_token(CONST_REAL);

    } finally {
      trace_return("constReal");
    }
  }

  final public void constLiteral() throws ParseException {
    trace_call("constLiteral");
    try {
      jj_consume_token(CONST_LITERAL);

    } finally {
      trace_return("constLiteral");
    }
  }

  final public void identifier() throws ParseException {
    trace_call("identifier");
    try {
      jj_consume_token(IDENTIFIER);

    } finally {
      trace_return("identifier");
    }
  }

  final public void nonsupportedSymbol() throws ParseException {
    trace_call("nonsupportedSymbol");
    try {
                              lexErrorCount++;
      jj_consume_token(NONSUPPORTED_SYMBOL);
        compile.printNotRecognizedToken(token.image, "Simbolo nao suportado", token.kind, token.beginLine, token.beginColumn);
    } finally {
      trace_return("nonsupportedSymbol");
    }
  }

  final public void nonsupportedConstLiteralSingle() throws ParseException {
    trace_call("nonsupportedConstLiteralSingle");
    try {
                                          lexErrorCount++;
      jj_consume_token(NONSUPPORTED_CONST_LITERAL_SINGLE);
        compile.printNotRecognizedToken(token.image, "Constante literal nao suportada, faltando aspas simples", token.kind, token.beginLine, token.beginColumn);
    } finally {
      trace_return("nonsupportedConstLiteralSingle");
    }
  }

  final public void nonsupportedConstLiteralDouble() throws ParseException {
    trace_call("nonsupportedConstLiteralDouble");
    try {
                                          lexErrorCount++;
      jj_consume_token(NONSUPPORTED_CONST_LITERAL_DOUBLE);
        compile.printNotRecognizedToken(token.image, "Constante literal nao suportada. faltando aspas duplas", token.kind, token.beginLine, token.beginColumn);
;
    } finally {
      trace_return("nonsupportedConstLiteralDouble");
    }
  }

  final public void nonsupportedBlockComment() throws ParseException {
    trace_call("nonsupportedBlockComment");
    try {
                                    lexErrorCount++;
      jj_consume_token(NONSUPPORTED_BLOCK_COMMENT);
        compile.printNotRecognizedToken(token.image, "Nao contem o fechamento do bloco de comentario", token.kind, token.beginLine, token.beginColumn);
    } finally {
      trace_return("nonsupportedBlockComment");
    }
  }

  final public void nonsupportedIdentifier() throws ParseException {
    trace_call("nonsupportedIdentifier");
    try {
                                  lexErrorCount++;
      jj_consume_token(NONSUPPORTED_IDENTIFIER);
        compile.printNotRecognizedToken(token.image, "Identificador invalido", token.kind, token.beginLine, token.beginColumn);
    } finally {
      trace_return("nonsupportedIdentifier");
    }
  }

  /** Generated Token Manager. */
  public LParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x800,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x1f800000,0x1f800000,0x40030000,0x40030000,0x206c0000,0x206c0000,0x100000,0x80000200,0xffffff80,0xffffff80,0xffffff80,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x10,0xa0,0x10,0x0,0x0,0x280,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x7800,0xe0000000,0x1b8000,0x1b8000,0x40002,0x0,0xe0000000,0xc00000,0x400000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0c00000,0xe0ffffff,0xe0ffffff,0x0,0xffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x3f,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LParser(LParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
